// Code generated by goa v3.19.1, DO NOT EDIT.
//
// user endpoints
//
// Command:
// $ goa gen github.com/mrngsht/realworld-goa-react/design

package user

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "user" service endpoints.
type Endpoints struct {
	Login          goa.Endpoint
	Register       goa.Endpoint
	GetCurrentUser goa.Endpoint
}

// NewEndpoints wraps the methods of the "user" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Login:          NewLoginEndpoint(s),
		Register:       NewRegisterEndpoint(s),
		GetCurrentUser: NewGetCurrentUserEndpoint(s),
	}
}

// Use applies the given middleware to all the "user" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Login = m(e.Login)
	e.Register = m(e.Register)
	e.GetCurrentUser = m(e.GetCurrentUser)
}

// NewLoginEndpoint returns an endpoint function that calls the method "login"
// of service "user".
func NewLoginEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*LoginPayload)
		return s.Login(ctx, p)
	}
}

// NewRegisterEndpoint returns an endpoint function that calls the method
// "register" of service "user".
func NewRegisterEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*RegisterPayload)
		return s.Register(ctx, p)
	}
}

// NewGetCurrentUserEndpoint returns an endpoint function that calls the method
// "getCurrentUser" of service "user".
func NewGetCurrentUserEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.GetCurrentUser(ctx)
	}
}
