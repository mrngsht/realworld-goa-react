// Code generated by goa v3.19.1, DO NOT EDIT.
//
// article HTTP client CLI support package
//
// Command:
// $ goa gen github.com/mrngsht/realworld-goa-react/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	article "github.com/mrngsht/realworld-goa-react/gen/article"
	goa "goa.design/goa/v3/pkg"
)

// BuildGetPayload builds the payload for the article get endpoint from CLI
// flags.
func BuildGetPayload(articleGetArticleID string) (*article.GetPayload, error) {
	var err error
	var articleID string
	{
		articleID = articleGetArticleID
		err = goa.MergeErrors(err, goa.ValidateFormat("articleId", articleID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &article.GetPayload{}
	v.ArticleID = articleID

	return v, nil
}

// BuildCreatePayload builds the payload for the article create endpoint from
// CLI flags.
func BuildCreatePayload(articleCreateBody string) (*article.CreatePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(articleCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"body\": \"Iste fugit eos et fugiat laudantium.\",\n      \"description\": \"Ipsam laborum expedita.\",\n      \"tagList\": [\n         \"Inventore earum alias.\",\n         \"Facere corrupti est maxime qui.\"\n      ],\n      \"title\": \"mqz\"\n   }'")
		}
		if body.TagList == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("tagList", "body"))
		}
		if utf8.RuneCountInString(body.Title) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", body.Title, utf8.RuneCountInString(body.Title), 128, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &article.CreatePayload{
		Title:       body.Title,
		Description: body.Description,
		Body:        body.Body,
	}
	if body.TagList != nil {
		v.TagList = make([]string, len(body.TagList))
		for i, val := range body.TagList {
			v.TagList[i] = val
		}
	} else {
		v.TagList = []string{}
	}

	return v, nil
}

// BuildFavoritePayload builds the payload for the article favorite endpoint
// from CLI flags.
func BuildFavoritePayload(articleFavoriteArticleID string) (*article.FavoritePayload, error) {
	var err error
	var articleID string
	{
		articleID = articleFavoriteArticleID
		err = goa.MergeErrors(err, goa.ValidateFormat("articleId", articleID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &article.FavoritePayload{}
	v.ArticleID = articleID

	return v, nil
}
