// Code generated by goa v3.19.1, DO NOT EDIT.
//
// article HTTP server types
//
// Command:
// $ goa gen github.com/mrngsht/realworld-goa-react/design

package server

import (
	"unicode/utf8"

	article "github.com/mrngsht/realworld-goa-react/gen/article"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "article" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	Title       *string  `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Description *string  `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	Body        *string  `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
	TagList     []string `form:"tagList,omitempty" json:"tagList,omitempty" xml:"tagList,omitempty"`
}

// GetResponseBody is the type of the "article" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	Article *ArticleDetailResponseBody `form:"article" json:"article" xml:"article"`
}

// CreateResponseBody is the type of the "article" service "create" endpoint
// HTTP response body.
type CreateResponseBody struct {
	Article *ArticleDetailResponseBody `form:"article" json:"article" xml:"article"`
}

// FavoriteResponseBody is the type of the "article" service "favorite"
// endpoint HTTP response body.
type FavoriteResponseBody struct {
	Article *ArticleDetailResponseBody `form:"article" json:"article" xml:"article"`
}

// ArticleDetailResponseBody is used to define fields on response body types.
type ArticleDetailResponseBody struct {
	ArticleID      string               `form:"articleId" json:"articleId" xml:"articleId"`
	Title          string               `form:"title" json:"title" xml:"title"`
	Description    string               `form:"description" json:"description" xml:"description"`
	Body           string               `form:"body" json:"body" xml:"body"`
	TagList        []string             `form:"tagList" json:"tagList" xml:"tagList"`
	CreatedAt      string               `form:"createdAt" json:"createdAt" xml:"createdAt"`
	UpdatedAt      string               `form:"updatedAt" json:"updatedAt" xml:"updatedAt"`
	Favorited      bool                 `form:"favorited" json:"favorited" xml:"favorited"`
	FavoritesCount uint                 `form:"favoritesCount" json:"favoritesCount" xml:"favoritesCount"`
	Author         *ProfileResponseBody `form:"author" json:"author" xml:"author"`
}

// ProfileResponseBody is used to define fields on response body types.
type ProfileResponseBody struct {
	Username  string `form:"username" json:"username" xml:"username"`
	Bio       string `form:"bio" json:"bio" xml:"bio"`
	Image     string `form:"image" json:"image" xml:"image"`
	Following bool   `form:"following" json:"following" xml:"following"`
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "article" service.
func NewGetResponseBody(res *article.GetResult) *GetResponseBody {
	body := &GetResponseBody{}
	if res.Article != nil {
		body.Article = marshalArticleArticleDetailToArticleDetailResponseBody(res.Article)
	}
	return body
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "article" service.
func NewCreateResponseBody(res *article.CreateResult) *CreateResponseBody {
	body := &CreateResponseBody{}
	if res.Article != nil {
		body.Article = marshalArticleArticleDetailToArticleDetailResponseBody(res.Article)
	}
	return body
}

// NewFavoriteResponseBody builds the HTTP response body from the result of the
// "favorite" endpoint of the "article" service.
func NewFavoriteResponseBody(res *article.FavoriteResult) *FavoriteResponseBody {
	body := &FavoriteResponseBody{}
	if res.Article != nil {
		body.Article = marshalArticleArticleDetailToArticleDetailResponseBody(res.Article)
	}
	return body
}

// NewGetPayload builds a article service get endpoint payload.
func NewGetPayload(articleID string) *article.GetPayload {
	v := &article.GetPayload{}
	v.ArticleID = articleID

	return v
}

// NewCreatePayload builds a article service create endpoint payload.
func NewCreatePayload(body *CreateRequestBody) *article.CreatePayload {
	v := &article.CreatePayload{
		Title:       *body.Title,
		Description: *body.Description,
		Body:        *body.Body,
	}
	v.TagList = make([]string, len(body.TagList))
	for i, val := range body.TagList {
		v.TagList[i] = val
	}

	return v
}

// NewFavoritePayload builds a article service favorite endpoint payload.
func NewFavoritePayload(articleID string) *article.FavoritePayload {
	v := &article.FavoritePayload{}
	v.ArticleID = articleID

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Body == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("body", "body"))
	}
	if body.TagList == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tagList", "body"))
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 128, false))
		}
	}
	return
}
