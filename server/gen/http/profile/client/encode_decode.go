// Code generated by goa v3.19.1, DO NOT EDIT.
//
// profile HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/mrngsht/realworld-goa-react/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	profile "github.com/mrngsht/realworld-goa-react/gen/profile"
	goahttp "goa.design/goa/v3/http"
)

// BuildFollowUserRequest instantiates a HTTP request object with method and
// path set to call the "profile" service "followUser" endpoint
func (c *Client) BuildFollowUserRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: FollowUserProfilePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("profile", "followUser", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeFollowUserRequest returns an encoder for requests sent to the profile
// followUser server.
func EncodeFollowUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*profile.FollowUserPayload)
		if !ok {
			return goahttp.ErrInvalidType("profile", "followUser", "*profile.FollowUserPayload", v)
		}
		body := NewFollowUserRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("profile", "followUser", err)
		}
		return nil
	}
}

// DecodeFollowUserResponse returns a decoder for responses returned by the
// profile followUser endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeFollowUserResponse may return the following errors:
//   - "UserNotFound" (type *goa.ServiceError): http.StatusBadRequest
//   - "UserAlreadyFollowing" (type *goa.ServiceError): http.StatusBadRequest
//   - "CannotFollowYourself" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeFollowUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body FollowUserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("profile", "followUser", err)
			}
			err = ValidateFollowUserResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("profile", "followUser", err)
			}
			res := NewFollowUserResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			en := resp.Header.Get("goa-error")
			switch en {
			case "UserNotFound":
				var (
					body FollowUserUserNotFoundResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("profile", "followUser", err)
				}
				err = ValidateFollowUserUserNotFoundResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("profile", "followUser", err)
				}
				return nil, NewFollowUserUserNotFound(&body)
			case "UserAlreadyFollowing":
				var (
					body FollowUserUserAlreadyFollowingResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("profile", "followUser", err)
				}
				err = ValidateFollowUserUserAlreadyFollowingResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("profile", "followUser", err)
				}
				return nil, NewFollowUserUserAlreadyFollowing(&body)
			case "CannotFollowYourself":
				var (
					body FollowUserCannotFollowYourselfResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("profile", "followUser", err)
				}
				err = ValidateFollowUserCannotFollowYourselfResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("profile", "followUser", err)
				}
				return nil, NewFollowUserCannotFollowYourself(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("profile", "followUser", resp.StatusCode, string(body))
			}
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("profile", "followUser", resp.StatusCode, string(body))
		}
	}
}

// BuildUnfollowUserRequest instantiates a HTTP request object with method and
// path set to call the "profile" service "unfollowUser" endpoint
func (c *Client) BuildUnfollowUserRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UnfollowUserProfilePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("profile", "unfollowUser", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUnfollowUserRequest returns an encoder for requests sent to the
// profile unfollowUser server.
func EncodeUnfollowUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*profile.UnfollowUserPayload)
		if !ok {
			return goahttp.ErrInvalidType("profile", "unfollowUser", "*profile.UnfollowUserPayload", v)
		}
		body := NewUnfollowUserRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("profile", "unfollowUser", err)
		}
		return nil
	}
}

// DecodeUnfollowUserResponse returns a decoder for responses returned by the
// profile unfollowUser endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUnfollowUserResponse may return the following errors:
//   - "UserNotFound" (type *goa.ServiceError): http.StatusBadRequest
//   - "UserNotFollowing" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeUnfollowUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UnfollowUserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("profile", "unfollowUser", err)
			}
			err = ValidateUnfollowUserResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("profile", "unfollowUser", err)
			}
			res := NewUnfollowUserResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			en := resp.Header.Get("goa-error")
			switch en {
			case "UserNotFound":
				var (
					body UnfollowUserUserNotFoundResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("profile", "unfollowUser", err)
				}
				err = ValidateUnfollowUserUserNotFoundResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("profile", "unfollowUser", err)
				}
				return nil, NewUnfollowUserUserNotFound(&body)
			case "UserNotFollowing":
				var (
					body UnfollowUserUserNotFollowingResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("profile", "unfollowUser", err)
				}
				err = ValidateUnfollowUserUserNotFollowingResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("profile", "unfollowUser", err)
				}
				return nil, NewUnfollowUserUserNotFollowing(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("profile", "unfollowUser", resp.StatusCode, string(body))
			}
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("profile", "unfollowUser", resp.StatusCode, string(body))
		}
	}
}

// unmarshalProfileResponseBodyToProfileProfile builds a value of type
// *profile.Profile from a value of type *ProfileResponseBody.
func unmarshalProfileResponseBodyToProfileProfile(v *ProfileResponseBody) *profile.Profile {
	res := &profile.Profile{
		Username:  *v.Username,
		Bio:       *v.Bio,
		Image:     *v.Image,
		Following: *v.Following,
	}

	return res
}
