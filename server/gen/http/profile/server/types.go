// Code generated by goa v3.19.1, DO NOT EDIT.
//
// profile HTTP server types
//
// Command:
// $ goa gen github.com/mrngsht/realworld-goa-react/design

package server

import (
	profile "github.com/mrngsht/realworld-goa-react/gen/profile"
	goa "goa.design/goa/v3/pkg"
)

// FollowUserRequestBody is the type of the "profile" service "followUser"
// endpoint HTTP request body.
type FollowUserRequestBody struct {
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// UnfollowUserRequestBody is the type of the "profile" service "unfollowUser"
// endpoint HTTP request body.
type UnfollowUserRequestBody struct {
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// FollowUserResponseBody is the type of the "profile" service "followUser"
// endpoint HTTP response body.
type FollowUserResponseBody struct {
	Profile *ProfileResponseBody `form:"profile" json:"profile" xml:"profile"`
}

// UnfollowUserResponseBody is the type of the "profile" service "unfollowUser"
// endpoint HTTP response body.
type UnfollowUserResponseBody struct {
	Profile *ProfileResponseBody `form:"profile" json:"profile" xml:"profile"`
}

// FollowUserUserAlreadyFollowingResponseBody is the type of the "profile"
// service "followUser" endpoint HTTP response body for the
// "UserAlreadyFollowing" error.
type FollowUserUserAlreadyFollowingResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UnfollowUserUserNotFollowingResponseBody is the type of the "profile"
// service "unfollowUser" endpoint HTTP response body for the
// "UserNotFollowing" error.
type UnfollowUserUserNotFollowingResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ProfileResponseBody is used to define fields on response body types.
type ProfileResponseBody struct {
	Username  string `form:"username" json:"username" xml:"username"`
	Bio       string `form:"bio" json:"bio" xml:"bio"`
	Image     string `form:"image" json:"image" xml:"image"`
	Following bool   `form:"following" json:"following" xml:"following"`
}

// NewFollowUserResponseBody builds the HTTP response body from the result of
// the "followUser" endpoint of the "profile" service.
func NewFollowUserResponseBody(res *profile.FollowUserResult) *FollowUserResponseBody {
	body := &FollowUserResponseBody{}
	if res.Profile != nil {
		body.Profile = marshalProfileProfileToProfileResponseBody(res.Profile)
	}
	return body
}

// NewUnfollowUserResponseBody builds the HTTP response body from the result of
// the "unfollowUser" endpoint of the "profile" service.
func NewUnfollowUserResponseBody(res *profile.UnfollowUserResult) *UnfollowUserResponseBody {
	body := &UnfollowUserResponseBody{}
	if res.Profile != nil {
		body.Profile = marshalProfileProfileToProfileResponseBody(res.Profile)
	}
	return body
}

// NewFollowUserUserAlreadyFollowingResponseBody builds the HTTP response body
// from the result of the "followUser" endpoint of the "profile" service.
func NewFollowUserUserAlreadyFollowingResponseBody(res *goa.ServiceError) *FollowUserUserAlreadyFollowingResponseBody {
	body := &FollowUserUserAlreadyFollowingResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUnfollowUserUserNotFollowingResponseBody builds the HTTP response body
// from the result of the "unfollowUser" endpoint of the "profile" service.
func NewUnfollowUserUserNotFollowingResponseBody(res *goa.ServiceError) *UnfollowUserUserNotFollowingResponseBody {
	body := &UnfollowUserUserNotFollowingResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewFollowUserPayload builds a profile service followUser endpoint payload.
func NewFollowUserPayload(body *FollowUserRequestBody) *profile.FollowUserPayload {
	v := &profile.FollowUserPayload{
		Username: *body.Username,
	}

	return v
}

// NewUnfollowUserPayload builds a profile service unfollowUser endpoint
// payload.
func NewUnfollowUserPayload(body *UnfollowUserRequestBody) *profile.UnfollowUserPayload {
	v := &profile.UnfollowUserPayload{
		Username: *body.Username,
	}

	return v
}

// ValidateFollowUserRequestBody runs the validations defined on
// FollowUserRequestBody
func ValidateFollowUserRequestBody(body *FollowUserRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Username != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.username", *body.Username, "^[a-zA-Z0-9_]{3,32}$"))
	}
	return
}

// ValidateUnfollowUserRequestBody runs the validations defined on
// UnfollowUserRequestBody
func ValidateUnfollowUserRequestBody(body *UnfollowUserRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Username != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.username", *body.Username, "^[a-zA-Z0-9_]{3,32}$"))
	}
	return
}
