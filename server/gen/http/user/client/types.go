// Code generated by goa v3.19.1, DO NOT EDIT.
//
// user HTTP client types
//
// Command:
// $ goa gen github.com/mrngsht/realworld-goa-react/design

package client

import (
	user "github.com/mrngsht/realworld-goa-react/gen/user"
	goa "goa.design/goa/v3/pkg"
)

// LoginRequestBody is the type of the "user" service "login" endpoint HTTP
// request body.
type LoginRequestBody struct {
	Email    string `form:"email" json:"email" xml:"email"`
	Password string `form:"password" json:"password" xml:"password"`
}

// RegisterRequestBody is the type of the "user" service "register" endpoint
// HTTP request body.
type RegisterRequestBody struct {
	Username string `form:"username" json:"username" xml:"username"`
	Email    string `form:"email" json:"email" xml:"email"`
	Password string `form:"password" json:"password" xml:"password"`
}

// LoginResponseBody is the type of the "user" service "login" endpoint HTTP
// response body.
type LoginResponseBody struct {
	User *UserTypeResponseBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
}

// RegisterResponseBody is the type of the "user" service "register" endpoint
// HTTP response body.
type RegisterResponseBody struct {
	User *UserTypeResponseBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
}

// UserTypeResponseBody is used to define fields on response body types.
type UserTypeResponseBody struct {
	Email    *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Token    *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	Bio      *string `form:"bio,omitempty" json:"bio,omitempty" xml:"bio,omitempty"`
	Image    *string `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
}

// NewLoginRequestBody builds the HTTP request body from the payload of the
// "login" endpoint of the "user" service.
func NewLoginRequestBody(p *user.LoginPayload) *LoginRequestBody {
	body := &LoginRequestBody{
		Email:    p.Email,
		Password: p.Password,
	}
	return body
}

// NewRegisterRequestBody builds the HTTP request body from the payload of the
// "register" endpoint of the "user" service.
func NewRegisterRequestBody(p *user.RegisterPayload) *RegisterRequestBody {
	body := &RegisterRequestBody{
		Username: p.Username,
		Email:    p.Email,
		Password: p.Password,
	}
	return body
}

// NewLoginResultOK builds a "user" service "login" endpoint result from a HTTP
// "OK" response.
func NewLoginResultOK(body *LoginResponseBody) *user.LoginResult {
	v := &user.LoginResult{}
	v.User = unmarshalUserTypeResponseBodyToUserUserType(body.User)

	return v
}

// NewRegisterResultOK builds a "user" service "register" endpoint result from
// a HTTP "OK" response.
func NewRegisterResultOK(body *RegisterResponseBody) *user.RegisterResult {
	v := &user.RegisterResult{}
	v.User = unmarshalUserTypeResponseBodyToUserUserType(body.User)

	return v
}

// ValidateLoginResponseBody runs the validations defined on LoginResponseBody
func ValidateLoginResponseBody(body *LoginResponseBody) (err error) {
	if body.User == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user", "body"))
	}
	if body.User != nil {
		if err2 := ValidateUserTypeResponseBody(body.User); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateRegisterResponseBody runs the validations defined on
// RegisterResponseBody
func ValidateRegisterResponseBody(body *RegisterResponseBody) (err error) {
	if body.User == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user", "body"))
	}
	if body.User != nil {
		if err2 := ValidateUserTypeResponseBody(body.User); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUserTypeResponseBody runs the validations defined on
// UserTypeResponseBody
func ValidateUserTypeResponseBody(body *UserTypeResponseBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Bio == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("bio", "body"))
	}
	if body.Image == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("image", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}
