// Code generated by goa v3.19.1, DO NOT EDIT.
//
// article endpoints
//
// Command:
// $ goa gen github.com/mrngsht/realworld-goa-react/design

package article

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "article" service endpoints.
type Endpoints struct {
	Get      goa.Endpoint
	Create   goa.Endpoint
	Favorite goa.Endpoint
}

// NewEndpoints wraps the methods of the "article" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Get:      NewGetEndpoint(s),
		Create:   NewCreateEndpoint(s),
		Favorite: NewFavoriteEndpoint(s),
	}
}

// Use applies the given middleware to all the "article" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Get = m(e.Get)
	e.Create = m(e.Create)
	e.Favorite = m(e.Favorite)
}

// NewGetEndpoint returns an endpoint function that calls the method "get" of
// service "article".
func NewGetEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetPayload)
		return s.Get(ctx, p)
	}
}

// NewCreateEndpoint returns an endpoint function that calls the method
// "create" of service "article".
func NewCreateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreatePayload)
		return s.Create(ctx, p)
	}
}

// NewFavoriteEndpoint returns an endpoint function that calls the method
// "favorite" of service "article".
func NewFavoriteEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*FavoritePayload)
		return s.Favorite(ctx, p)
	}
}
