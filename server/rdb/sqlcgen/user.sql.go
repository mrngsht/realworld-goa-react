// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package sqlcgen

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getUser = `-- name: GetUser :one
SELECT id_ FROM user_
WHERE id_ = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var id_ uuid.UUID
	err := row.Scan(&id_)
	return id_, err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO user_
(created_at_, id_) 
VALUES ($1, $2)
`

type InsertUserParams struct {
	CreatedAt time.Time
	ID        uuid.UUID
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser, arg.CreatedAt, arg.ID)
	return err
}

const insertUserAuthPassword = `-- name: InsertUserAuthPassword :exec
INSERT INTO user_auth_password_
(created_at_, updated_at_, user_id_, password_hash_) 
VALUES ($3, $3, $1, $2)
`

type InsertUserAuthPasswordParams struct {
	UserID       uuid.UUID
	PasswordHash string
	CreatedAt    time.Time
}

func (q *Queries) InsertUserAuthPassword(ctx context.Context, arg InsertUserAuthPasswordParams) error {
	_, err := q.db.ExecContext(ctx, insertUserAuthPassword, arg.UserID, arg.PasswordHash, arg.CreatedAt)
	return err
}

const insertUserProfile = `-- name: InsertUserProfile :exec
INSERT INTO user_profile_
(created_at_, updated_at_, user_id_, username_, email_, bio_, image_url_) 
VALUES ($6, $6, $1, $2, $3, $4, $5)
`

type InsertUserProfileParams struct {
	UserID    uuid.UUID
	Username  string
	Email     string
	Bio       string
	ImageUrl  string
	CreatedAt time.Time
}

func (q *Queries) InsertUserProfile(ctx context.Context, arg InsertUserProfileParams) error {
	_, err := q.db.ExecContext(ctx, insertUserProfile,
		arg.UserID,
		arg.Username,
		arg.Email,
		arg.Bio,
		arg.ImageUrl,
		arg.CreatedAt,
	)
	return err
}

const insertUserProfileMutation = `-- name: InsertUserProfileMutation :exec
INSERT INTO user_profile_mutation_
(created_at_, user_id_, username_, email_, bio_, image_url_) 
VALUES ($1, $2, $3, $4, $5, $6)
`

type InsertUserProfileMutationParams struct {
	CreatedAt time.Time
	UserID    uuid.UUID
	Username  string
	Email     string
	Bio       string
	ImageUrl  string
}

func (q *Queries) InsertUserProfileMutation(ctx context.Context, arg InsertUserProfileMutationParams) error {
	_, err := q.db.ExecContext(ctx, insertUserProfileMutation,
		arg.CreatedAt,
		arg.UserID,
		arg.Username,
		arg.Email,
		arg.Bio,
		arg.ImageUrl,
	)
	return err
}
