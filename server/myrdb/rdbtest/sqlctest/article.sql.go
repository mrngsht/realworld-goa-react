// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: article.sql

package sqlctest

import (
	"context"

	"github.com/google/uuid"
)

const getArticleByID = `-- name: GetArticleByID :one
SELECT created_at_, id_ FROM article_
WHERE id_ = $1
LIMIT 1
`

func (q *Queries) GetArticleByID(ctx context.Context, db DBTX, id uuid.UUID) (Article, error) {
	row := db.QueryRow(ctx, getArticleByID, id)
	var i Article
	err := row.Scan(&i.CreatedAt, &i.ID)
	return i, err
}

const getArticleContentByArticleID = `-- name: GetArticleContentByArticleID :one
SELECT created_at_, updated_at_, article_id_, title_, description_, body_, author_user_id_ FROM article_content_
WHERE article_id_ = $1
LIMIT 1
`

func (q *Queries) GetArticleContentByArticleID(ctx context.Context, db DBTX, articleID uuid.UUID) (ArticleContent, error) {
	row := db.QueryRow(ctx, getArticleContentByArticleID, articleID)
	var i ArticleContent
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ArticleID,
		&i.Title,
		&i.Description,
		&i.Body,
		&i.AuthorUserID,
	)
	return i, err
}

const getArticleStatsByArticleID = `-- name: GetArticleStatsByArticleID :one
SELECT created_at_, updated_at_, article_id_, favorites_count_ FROM article_stats_
WHERE article_id_ = $1
LIMIT 1
`

func (q *Queries) GetArticleStatsByArticleID(ctx context.Context, db DBTX, articleID uuid.UUID) (ArticleStats, error) {
	row := db.QueryRow(ctx, getArticleStatsByArticleID, articleID)
	var i ArticleStats
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ArticleID,
		&i.FavoritesCount,
	)
	return i, err
}

const listArticleContentMutationByArticleID = `-- name: ListArticleContentMutationByArticleID :many
SELECT created_at_, article_id_, title_, description_, body_, author_user_id_ FROM article_content_mutation_
WHERE article_id_ = $1
ORDER BY created_at_ ASC
`

func (q *Queries) ListArticleContentMutationByArticleID(ctx context.Context, db DBTX, articleID uuid.UUID) ([]ArticleContentMutation, error) {
	rows, err := db.Query(ctx, listArticleContentMutationByArticleID, articleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ArticleContentMutation
	for rows.Next() {
		var i ArticleContentMutation
		if err := rows.Scan(
			&i.CreatedAt,
			&i.ArticleID,
			&i.Title,
			&i.Description,
			&i.Body,
			&i.AuthorUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listArticleTagByArticleID = `-- name: ListArticleTagByArticleID :many
SELECT created_at_, article_id_, seq_no_, tag_ FROM article_tag_
WHERE article_id_ = $1
ORDER BY seq_no_ ASC
`

func (q *Queries) ListArticleTagByArticleID(ctx context.Context, db DBTX, articleID uuid.UUID) ([]ArticleTag, error) {
	rows, err := db.Query(ctx, listArticleTagByArticleID, articleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ArticleTag
	for rows.Next() {
		var i ArticleTag
		if err := rows.Scan(
			&i.CreatedAt,
			&i.ArticleID,
			&i.SeqNo,
			&i.Tag,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listArticleTagMutationByArticleID = `-- name: ListArticleTagMutationByArticleID :many
SELECT created_at_, article_id_, tags_ FROM article_tag_mutation_
WHERE article_id_ = $1
ORDER BY created_at_ ASC
`

func (q *Queries) ListArticleTagMutationByArticleID(ctx context.Context, db DBTX, articleID uuid.UUID) ([]ArticleTagMutation, error) {
	rows, err := db.Query(ctx, listArticleTagMutationByArticleID, articleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ArticleTagMutation
	for rows.Next() {
		var i ArticleTagMutation
		if err := rows.Scan(&i.CreatedAt, &i.ArticleID, &i.Tags); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
