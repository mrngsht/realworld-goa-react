// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package sqlctest

import (
	"context"

	"github.com/google/uuid"
)

const getUserAuthPasswordByUserID = `-- name: GetUserAuthPasswordByUserID :one
SELECT created_at_, updated_at_, user_id_, password_hash_ FROM user_auth_password_
WHERE user_id_ = $1
LIMIT 1
`

func (q *Queries) GetUserAuthPasswordByUserID(ctx context.Context, userID uuid.UUID) (UserAuthPassword, error) {
	row := q.db.QueryRowContext(ctx, getUserAuthPasswordByUserID, userID)
	var i UserAuthPassword
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.PasswordHash,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT created_at_, id_ FROM user_
WHERE id_ = $1
LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(&i.CreatedAt, &i.ID)
	return i, err
}

const getUserEmailByEmail = `-- name: GetUserEmailByEmail :one
SELECT created_at_, updated_at_, user_id_, email_ FROM user_email_
WHERE email_ = $1
LIMIT 1
`

func (q *Queries) GetUserEmailByEmail(ctx context.Context, email string) (UserEmail, error) {
	row := q.db.QueryRowContext(ctx, getUserEmailByEmail, email)
	var i UserEmail
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Email,
	)
	return i, err
}

const getUserEmailByID = `-- name: GetUserEmailByID :one
SELECT created_at_, updated_at_, user_id_, email_ FROM user_email_
WHERE user_id_ = $1
LIMIT 1
`

func (q *Queries) GetUserEmailByID(ctx context.Context, userID uuid.UUID) (UserEmail, error) {
	row := q.db.QueryRowContext(ctx, getUserEmailByID, userID)
	var i UserEmail
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Email,
	)
	return i, err
}

const getUserProfileByUsername = `-- name: GetUserProfileByUsername :one
SELECT created_at_, updated_at_, user_id_, username_, bio_, image_url_ FROM user_profile_
WHERE username_ = $1
LIMIT 1
`

func (q *Queries) GetUserProfileByUsername(ctx context.Context, username string) (UserProfile, error) {
	row := q.db.QueryRowContext(ctx, getUserProfileByUsername, username)
	var i UserProfile
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Username,
		&i.Bio,
		&i.ImageUrl,
	)
	return i, err
}

const listUserEmailMutationByUserID = `-- name: ListUserEmailMutationByUserID :many
SELECT created_at_, user_id_, email_ FROM user_email_mutation_
WHERE user_id_ = $1
`

func (q *Queries) ListUserEmailMutationByUserID(ctx context.Context, userID uuid.UUID) ([]UserEmailMutation, error) {
	rows, err := q.db.QueryContext(ctx, listUserEmailMutationByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserEmailMutation
	for rows.Next() {
		var i UserEmailMutation
		if err := rows.Scan(&i.CreatedAt, &i.UserID, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserFollowByUserID = `-- name: ListUserFollowByUserID :many
SELECT created_at_, user_id_, followed_user_id_ FROM user_follow_
WHERE user_id_ = $1
`

func (q *Queries) ListUserFollowByUserID(ctx context.Context, userID uuid.UUID) ([]UserFollow, error) {
	rows, err := q.db.QueryContext(ctx, listUserFollowByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserFollow
	for rows.Next() {
		var i UserFollow
		if err := rows.Scan(&i.CreatedAt, &i.UserID, &i.FollowedUserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserFollowMutationByUserID = `-- name: ListUserFollowMutationByUserID :many
SELECT created_at_, user_id_, followed_user_id_, type_ FROM user_follow_mutation_
WHERE user_id_ = $1
`

func (q *Queries) ListUserFollowMutationByUserID(ctx context.Context, userID uuid.UUID) ([]UserFollowMutation, error) {
	rows, err := q.db.QueryContext(ctx, listUserFollowMutationByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserFollowMutation
	for rows.Next() {
		var i UserFollowMutation
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UserID,
			&i.FollowedUserID,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserProfileMutationByUserID = `-- name: ListUserProfileMutationByUserID :many
SELECT created_at_, user_id_, username_, bio_, image_url_ FROM user_profile_mutation_
WHERE user_id_ = $1
`

func (q *Queries) ListUserProfileMutationByUserID(ctx context.Context, userID uuid.UUID) ([]UserProfileMutation, error) {
	rows, err := q.db.QueryContext(ctx, listUserProfileMutationByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserProfileMutation
	for rows.Next() {
		var i UserProfileMutation
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UserID,
			&i.Username,
			&i.Bio,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
