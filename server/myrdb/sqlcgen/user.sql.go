// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package sqlcgen

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getPasswordHashByUserID = `-- name: GetPasswordHashByUserID :one
SELECT password_hash_ FROM user_auth_password_ 
WHERE user_id_ = $1
LIMIT 1
`

func (q *Queries) GetPasswordHashByUserID(ctx context.Context, userID uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getPasswordHashByUserID, userID)
	var password_hash_ string
	err := row.Scan(&password_hash_)
	return password_hash_, err
}

const getUserIDByEmail = `-- name: GetUserIDByEmail :one
SELECT user_id_ FROM user_email_ 
WHERE email_ = $1
LIMIT 1
`

func (q *Queries) GetUserIDByEmail(ctx context.Context, email string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUserIDByEmail, email)
	var user_id_ uuid.UUID
	err := row.Scan(&user_id_)
	return user_id_, err
}

const getUserProfileByUserID = `-- name: GetUserProfileByUserID :one
SELECT 
  username_, 
  bio_, 
  image_url_ 
FROM user_profile_
WHERE user_id_ = $1
LIMIT 1
`

type GetUserProfileByUserIDRow struct {
	Username string
	Bio      string
	ImageUrl string
}

func (q *Queries) GetUserProfileByUserID(ctx context.Context, userID uuid.UUID) (GetUserProfileByUserIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserProfileByUserID, userID)
	var i GetUserProfileByUserIDRow
	err := row.Scan(&i.Username, &i.Bio, &i.ImageUrl)
	return i, err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO user_
(created_at_, id_) 
VALUES ($1, $2)
`

type InsertUserParams struct {
	CreatedAt time.Time
	ID        uuid.UUID
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser, arg.CreatedAt, arg.ID)
	return err
}

const insertUserAuthPassword = `-- name: InsertUserAuthPassword :exec
INSERT INTO user_auth_password_
(created_at_, updated_at_, user_id_, password_hash_) 
VALUES ($3, $3, $1, $2)
`

type InsertUserAuthPasswordParams struct {
	UserID       uuid.UUID
	PasswordHash string
	CreatedAt    time.Time
}

func (q *Queries) InsertUserAuthPassword(ctx context.Context, arg InsertUserAuthPasswordParams) error {
	_, err := q.db.ExecContext(ctx, insertUserAuthPassword, arg.UserID, arg.PasswordHash, arg.CreatedAt)
	return err
}

const insertUserEmail = `-- name: InsertUserEmail :exec
INSERT INTO user_email_
(created_at_, updated_at_, user_id_, email_) 
VALUES ($3, $3, $1, $2)
`

type InsertUserEmailParams struct {
	UserID    uuid.UUID
	Email     string
	CreatedAt time.Time
}

func (q *Queries) InsertUserEmail(ctx context.Context, arg InsertUserEmailParams) error {
	_, err := q.db.ExecContext(ctx, insertUserEmail, arg.UserID, arg.Email, arg.CreatedAt)
	return err
}

const insertUserEmailMutation = `-- name: InsertUserEmailMutation :exec
INSERT INTO user_email_mutation_
(created_at_, user_id_, email_) 
VALUES ($1, $2, $3)
`

type InsertUserEmailMutationParams struct {
	CreatedAt time.Time
	UserID    uuid.UUID
	Email     string
}

func (q *Queries) InsertUserEmailMutation(ctx context.Context, arg InsertUserEmailMutationParams) error {
	_, err := q.db.ExecContext(ctx, insertUserEmailMutation, arg.CreatedAt, arg.UserID, arg.Email)
	return err
}

const insertUserProfile = `-- name: InsertUserProfile :exec
INSERT INTO user_profile_
(created_at_, updated_at_, user_id_, username_, bio_, image_url_) 
VALUES ($5, $5, $1, $2, $3, $4)
`

type InsertUserProfileParams struct {
	UserID    uuid.UUID
	Username  string
	Bio       string
	ImageUrl  string
	CreatedAt time.Time
}

func (q *Queries) InsertUserProfile(ctx context.Context, arg InsertUserProfileParams) error {
	_, err := q.db.ExecContext(ctx, insertUserProfile,
		arg.UserID,
		arg.Username,
		arg.Bio,
		arg.ImageUrl,
		arg.CreatedAt,
	)
	return err
}

const insertUserProfileMutation = `-- name: InsertUserProfileMutation :exec
INSERT INTO user_profile_mutation_
(created_at_, user_id_, username_, bio_, image_url_) 
VALUES ($1, $2, $3, $4, $5)
`

type InsertUserProfileMutationParams struct {
	CreatedAt time.Time
	UserID    uuid.UUID
	Username  string
	Bio       string
	ImageUrl  string
}

func (q *Queries) InsertUserProfileMutation(ctx context.Context, arg InsertUserProfileMutationParams) error {
	_, err := q.db.ExecContext(ctx, insertUserProfileMutation,
		arg.CreatedAt,
		arg.UserID,
		arg.Username,
		arg.Bio,
		arg.ImageUrl,
	)
	return err
}
