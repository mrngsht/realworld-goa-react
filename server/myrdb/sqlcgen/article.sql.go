// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: article.sql

package sqlcgen

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const insertArticle = `-- name: InsertArticle :exec
INSERT INTO article_
(created_at_, id_) 
VALUES ($1, $2)
`

type InsertArticleParams struct {
	CreatedAt time.Time
	ID        uuid.UUID
}

func (q *Queries) InsertArticle(ctx context.Context, arg InsertArticleParams) error {
	_, err := q.db.Exec(ctx, insertArticle, arg.CreatedAt, arg.ID)
	return err
}

const insertArticleContent = `-- name: InsertArticleContent :exec
INSERT INTO article_content_
(created_at_, updated_at_, article_id_, title_, description_, body_, author_user_id_) 
VALUES ($6, $6, $1, $2, $3, $4, $5)
`

type InsertArticleContentParams struct {
	ArticleID    uuid.UUID
	Title        string
	Description  string
	Body         string
	AuthorUserID uuid.UUID
	CreatedAt    time.Time
}

func (q *Queries) InsertArticleContent(ctx context.Context, arg InsertArticleContentParams) error {
	_, err := q.db.Exec(ctx, insertArticleContent,
		arg.ArticleID,
		arg.Title,
		arg.Description,
		arg.Body,
		arg.AuthorUserID,
		arg.CreatedAt,
	)
	return err
}

const insertArticleContentMutation = `-- name: InsertArticleContentMutation :exec
INSERT INTO article_content_mutation_
(created_at_, article_id_, title_, description_, body_, author_user_id_) 
VALUES ($1, $2, $3, $4, $5, $6)
`

type InsertArticleContentMutationParams struct {
	CreatedAt    time.Time
	ArticleID    uuid.UUID
	Title        string
	Description  string
	Body         string
	AuthorUserID uuid.UUID
}

func (q *Queries) InsertArticleContentMutation(ctx context.Context, arg InsertArticleContentMutationParams) error {
	_, err := q.db.Exec(ctx, insertArticleContentMutation,
		arg.CreatedAt,
		arg.ArticleID,
		arg.Title,
		arg.Description,
		arg.Body,
		arg.AuthorUserID,
	)
	return err
}

const insertArticleStats = `-- name: InsertArticleStats :exec
INSERT INTO article_stats_
(created_at_, updated_at_, article_id_, favorites_count_)
VALUES ($3, $3, $1, $2)
`

type InsertArticleStatsParams struct {
	ArticleID      uuid.UUID
	FavoritesCount *int64
	CreatedAt      time.Time
}

func (q *Queries) InsertArticleStats(ctx context.Context, arg InsertArticleStatsParams) error {
	_, err := q.db.Exec(ctx, insertArticleStats, arg.ArticleID, arg.FavoritesCount, arg.CreatedAt)
	return err
}

type InsertArticleTagParams struct {
	CreatedAt time.Time
	ArticleID uuid.UUID
	Tag       string
}

const insertArticleTagMutation = `-- name: InsertArticleTagMutation :exec
INSERT INTO article_tag_mutation_
(created_at_, article_id_, tags_) 
VALUES ($1, $2, $3)
`

type InsertArticleTagMutationParams struct {
	CreatedAt time.Time
	ArticleID uuid.UUID
	Tags      []byte
}

func (q *Queries) InsertArticleTagMutation(ctx context.Context, arg InsertArticleTagMutationParams) error {
	_, err := q.db.Exec(ctx, insertArticleTagMutation, arg.CreatedAt, arg.ArticleID, arg.Tags)
	return err
}
