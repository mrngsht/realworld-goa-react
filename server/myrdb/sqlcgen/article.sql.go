// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: article.sql

package sqlcgen

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getArticleContentByArticleID = `-- name: GetArticleContentByArticleID :one
SELECT 
  created_at_,
  updated_at_,
  article_id_,
  title_,
  description_,
  body_,
  author_user_id_
FROM article_content_ 
WHERE article_id_ = $1
LIMIT 1
`

func (q *Queries) GetArticleContentByArticleID(ctx context.Context, db DBTX, articleID uuid.UUID) (ArticleContent, error) {
	row := db.QueryRow(ctx, getArticleContentByArticleID, articleID)
	var i ArticleContent
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ArticleID,
		&i.Title,
		&i.Description,
		&i.Body,
		&i.AuthorUserID,
	)
	return i, err
}

const getArticleStatsByArticleID = `-- name: GetArticleStatsByArticleID :one
SELECT 
  article_id_,
  favorites_count_
FROM article_stats_ 
WHERE article_id_ = $1
LIMIT 1
`

type GetArticleStatsByArticleIDRow struct {
	ArticleID      uuid.UUID
	FavoritesCount int64
}

func (q *Queries) GetArticleStatsByArticleID(ctx context.Context, db DBTX, articleID uuid.UUID) (GetArticleStatsByArticleIDRow, error) {
	row := db.QueryRow(ctx, getArticleStatsByArticleID, articleID)
	var i GetArticleStatsByArticleIDRow
	err := row.Scan(&i.ArticleID, &i.FavoritesCount)
	return i, err
}

const getArticleStatsByArticleIDForUpdate = `-- name: GetArticleStatsByArticleIDForUpdate :one
SELECT 
  article_id_,
  favorites_count_
FROM article_stats_ 
WHERE article_id_ = $1
LIMIT 1
FOR UPDATE
`

type GetArticleStatsByArticleIDForUpdateRow struct {
	ArticleID      uuid.UUID
	FavoritesCount int64
}

func (q *Queries) GetArticleStatsByArticleIDForUpdate(ctx context.Context, db DBTX, articleID uuid.UUID) (GetArticleStatsByArticleIDForUpdateRow, error) {
	row := db.QueryRow(ctx, getArticleStatsByArticleIDForUpdate, articleID)
	var i GetArticleStatsByArticleIDForUpdateRow
	err := row.Scan(&i.ArticleID, &i.FavoritesCount)
	return i, err
}

const insertArticle = `-- name: InsertArticle :exec
INSERT INTO article_
(created_at_, id_) 
VALUES ($1, $2)
`

type InsertArticleParams struct {
	CreatedAt time.Time
	ID        uuid.UUID
}

func (q *Queries) InsertArticle(ctx context.Context, db DBTX, arg InsertArticleParams) error {
	_, err := db.Exec(ctx, insertArticle, arg.CreatedAt, arg.ID)
	return err
}

const insertArticleContent = `-- name: InsertArticleContent :exec
INSERT INTO article_content_
(created_at_, updated_at_, article_id_, title_, description_, body_, author_user_id_) 
VALUES ($6, $6, $1, $2, $3, $4, $5)
`

type InsertArticleContentParams struct {
	ArticleID    uuid.UUID
	Title        string
	Description  string
	Body         string
	AuthorUserID uuid.UUID
	CreatedAt    time.Time
}

func (q *Queries) InsertArticleContent(ctx context.Context, db DBTX, arg InsertArticleContentParams) error {
	_, err := db.Exec(ctx, insertArticleContent,
		arg.ArticleID,
		arg.Title,
		arg.Description,
		arg.Body,
		arg.AuthorUserID,
		arg.CreatedAt,
	)
	return err
}

const insertArticleContentMutation = `-- name: InsertArticleContentMutation :exec
INSERT INTO article_content_mutation_
(created_at_, article_id_, title_, description_, body_, author_user_id_) 
VALUES ($1, $2, $3, $4, $5, $6)
`

type InsertArticleContentMutationParams struct {
	CreatedAt    time.Time
	ArticleID    uuid.UUID
	Title        string
	Description  string
	Body         string
	AuthorUserID uuid.UUID
}

func (q *Queries) InsertArticleContentMutation(ctx context.Context, db DBTX, arg InsertArticleContentMutationParams) error {
	_, err := db.Exec(ctx, insertArticleContentMutation,
		arg.CreatedAt,
		arg.ArticleID,
		arg.Title,
		arg.Description,
		arg.Body,
		arg.AuthorUserID,
	)
	return err
}

const insertArticleFavorite = `-- name: InsertArticleFavorite :exec
INSERT INTO article_favorite_
(created_at_, article_id_, user_id_)
VALUES ($1, $2, $3)
`

type InsertArticleFavoriteParams struct {
	CreatedAt time.Time
	ArticleID uuid.UUID
	UserID    uuid.UUID
}

func (q *Queries) InsertArticleFavorite(ctx context.Context, db DBTX, arg InsertArticleFavoriteParams) error {
	_, err := db.Exec(ctx, insertArticleFavorite, arg.CreatedAt, arg.ArticleID, arg.UserID)
	return err
}

const insertArticleFavoriteMutation = `-- name: InsertArticleFavoriteMutation :exec
INSERT INTO article_favorite_mutation_
(created_at_, article_id_, user_id_, type_)
VALUES ($1, $2, $3, $4)
`

type InsertArticleFavoriteMutationParams struct {
	CreatedAt time.Time
	ArticleID uuid.UUID
	UserID    uuid.UUID
	Type      ArticleFavoriteMutationType
}

func (q *Queries) InsertArticleFavoriteMutation(ctx context.Context, db DBTX, arg InsertArticleFavoriteMutationParams) error {
	_, err := db.Exec(ctx, insertArticleFavoriteMutation,
		arg.CreatedAt,
		arg.ArticleID,
		arg.UserID,
		arg.Type,
	)
	return err
}

const insertArticleStats = `-- name: InsertArticleStats :exec
INSERT INTO article_stats_
(created_at_, updated_at_, article_id_, favorites_count_)
VALUES ($3, $3, $1, $2)
`

type InsertArticleStatsParams struct {
	ArticleID      uuid.UUID
	FavoritesCount int64
	CreatedAt      time.Time
}

func (q *Queries) InsertArticleStats(ctx context.Context, db DBTX, arg InsertArticleStatsParams) error {
	_, err := db.Exec(ctx, insertArticleStats, arg.ArticleID, arg.FavoritesCount, arg.CreatedAt)
	return err
}

type InsertArticleTagParams struct {
	CreatedAt time.Time
	ArticleID uuid.UUID
	SeqNo     int32
	Tag       string
}

const insertArticleTagMutation = `-- name: InsertArticleTagMutation :exec
INSERT INTO article_tag_mutation_
(created_at_, article_id_, tags_) 
VALUES ($1, $2, $3)
`

type InsertArticleTagMutationParams struct {
	CreatedAt time.Time
	ArticleID uuid.UUID
	Tags      []byte
}

func (q *Queries) InsertArticleTagMutation(ctx context.Context, db DBTX, arg InsertArticleTagMutationParams) error {
	_, err := db.Exec(ctx, insertArticleTagMutation, arg.CreatedAt, arg.ArticleID, arg.Tags)
	return err
}

const isArticleFavoritedByArticleIDAndUserID = `-- name: IsArticleFavoritedByArticleIDAndUserID :one
SELECT EXISTS (
  SELECT 1
  FROM article_favorite_ 
  WHERE article_id_ = $1 AND user_id_ = $2
)
`

type IsArticleFavoritedByArticleIDAndUserIDParams struct {
	ArticleID uuid.UUID
	UserID    uuid.UUID
}

func (q *Queries) IsArticleFavoritedByArticleIDAndUserID(ctx context.Context, db DBTX, arg IsArticleFavoritedByArticleIDAndUserIDParams) (bool, error) {
	row := db.QueryRow(ctx, isArticleFavoritedByArticleIDAndUserID, arg.ArticleID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const listArticleTagByArticleID = `-- name: ListArticleTagByArticleID :many
SELECT 
  tag_
FROM article_tag_
WHERE article_id_ = $1
ORDER BY seq_no_ ASC
`

func (q *Queries) ListArticleTagByArticleID(ctx context.Context, db DBTX, articleID uuid.UUID) ([]string, error) {
	rows, err := db.Query(ctx, listArticleTagByArticleID, articleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var tag_ string
		if err := rows.Scan(&tag_); err != nil {
			return nil, err
		}
		items = append(items, tag_)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArticleStatsFavoritesCount = `-- name: UpdateArticleStatsFavoritesCount :exec
UPDATE article_stats_
SET favorites_count_ = $1
WHERE article_id_ = $2
`

type UpdateArticleStatsFavoritesCountParams struct {
	FavoritesCount int64
	ArticleID      uuid.UUID
}

func (q *Queries) UpdateArticleStatsFavoritesCount(ctx context.Context, db DBTX, arg UpdateArticleStatsFavoritesCountParams) error {
	_, err := db.Exec(ctx, updateArticleStatsFavoritesCount, arg.FavoritesCount, arg.ArticleID)
	return err
}
